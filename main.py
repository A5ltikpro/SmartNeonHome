import serial
from telebot import *
from time import sleep
port = 5
try:
   ArduinoSerial = serial.Serial(('com'+str(port)), 9600)
   sleep(1)
except:
   print("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ com"+str(port))

big_svet = "‚ùå"
stol_svet = "‚ùå"
rgb_svet = "‚ùå"
loop_svet = "‚ùå"
roz_stol = "‚ùå"
roz_stan = "‚ùå"
roz_bp = "‚ùå"
error = 0
error_bot = 0
UserPassword = 0
Users = []


users = ["", ""]

try:
    if error_bot == 0:
        print("–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    bot = telebot.TeleBot('6604896635:AAEYvcBPvbE1YwrdZbmbv77xu-R9G_hypss')



    @bot.message_handler(commands=['start'])
    def user(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üí°—Å–≤–µ—Çüí°")
        btn2 = types.KeyboardButton('‚ö°Ô∏è—Ä–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è')
        btn4 = types.KeyboardButton('üì¥–æ—Ç–∫–ª—é—á–∏—Ç—åüì¥')
        btn20 = types.KeyboardButton("off all")
        markup.add(btn1, btn2, btn4, btn20)
        bot.send_message(message.from_user.id, "üñ•–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µüñ•"
                                               "\n"
                                               "\n–°–≤–µ—Çüí°"
                                               "\n–ë–æ–ª—å—à–æ–π        " + str(big_svet) +
                                               "\n–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π  " + str(stol_svet) +
                                               "\nRGB –ª–µ–Ω—Ç–∞      " + str(rgb_svet) +
                                               "\n–õ—É–ø–∞                " + str(loop_svet) +
                                               "\n"
                                               "\n–†–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è"
                                               "\n–°—Ç–æ–ª                   " + str(roz_stol) +
                                               "\n–°—Ç–∞–Ω—Ü–∏—è            " + str(roz_stan) +
                                               "\n–ë–ª–æ–∫ –ü–∏—Ç–∞–Ω–∏—è  " + str(roz_bp), reply_markup=markup)



    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):

        print(message.text)
        if message.text == "üí°—Å–≤–µ—Çüí°":
            sanes = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn5 = types.KeyboardButton("üí°–ë–æ–ª—å—à–æ–πüí°")
            btn6 = types.KeyboardButton('üí°–ù–∞—Å—Ç–æ–ª—å–Ω—ã–πüí°')
            btn7 = types.KeyboardButton("üí°RGB –ª–µ–Ω—Ç–∞üí°")
            btn8 = types.KeyboardButton('üí°–õ—É–ø–∞üí°')
            btn9 = types.KeyboardButton('–Ω–∞–∑–∞–¥')
            sanes.add(btn5, btn6, btn7, btn8, btn9)
            bot.send_message(message.from_user.id, "üí°—Å–≤–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µüí°", reply_markup=sanes)
        elif message.text == "‚ö°Ô∏è—Ä–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è":
            rozet = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn10 = types.KeyboardButton("‚ö°Ô∏è—Å—Ç–æ–ª‚ö°Ô∏è")
            btn11 = types.KeyboardButton('‚ö°Ô∏è—Å—Ç–∞–Ω—Ü–∏—è‚ö°Ô∏è')
            btn12 = types.KeyboardButton("‚ö°Ô∏è–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è‚ö°Ô∏è")
            btn13 = types.KeyboardButton('–Ω–∞–∑–∞–¥')
            rozet.add(btn10, btn11, btn12, btn13)
            bot.send_message(message.from_user.id, '‚ö°Ô∏è—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏‚ö°Ô∏è', reply_markup=rozet)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        elif message.text == "üì¥–æ—Ç–∫–ª—é—á–∏—Ç—åüì¥":
            off = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn18 = types.KeyboardButton("–¥–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å")
            btn19 = types.KeyboardButton('–Ω–∞–∑–∞–¥')
            off.add(btn18, btn19)
            bot.send_message(message.from_user.id, '–≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É Smart Neon Home?', reply_markup=off)

        # —Å–≤–µ—Ç
        elif message.text == "üí°–ë–æ–ª—å—à–æ–πüí°":
            global big_svet
            if big_svet == "‚ùå":
                ArduinoSerial.write(bytes([201]))
                big_svet = "‚úÖ"
            else:
                ArduinoSerial.write(bytes([211]))
                big_svet = "‚ùå"
            user(message)
        elif message.text == "üí°–ù–∞—Å—Ç–æ–ª—å–Ω—ã–πüí°":
            global stol_svet
            if stol_svet == "‚ùå":
                ArduinoSerial.write(bytes([202]))
                stol_svet = "‚úÖ"
            else:
                ArduinoSerial.write(bytes([212]))
                stol_svet = "‚ùå"
            user(message)
        elif message.text == "üí°RGB –ª–µ–Ω—Ç–∞üí°":
            global rgb_svet
            if rgb_svet == "‚ùå":
                ArduinoSerial.write(bytes([203]))
                rgb_svet = "‚úÖ"
            else:
                ArduinoSerial.write(bytes([213]))
                rgb_svet = "‚ùå"
            user(message)
        elif message.text == "üí°–õ—É–ø–∞üí°":
            global loop_svet
            if loop_svet == "‚ùå":
                ArduinoSerial.write(bytes([204]))
                loop_svet = "‚úÖ"
            else:
                ArduinoSerial.write(bytes([214]))
                loop_svet = "‚ùå"
            user(message)
        # —Ä–æ–∑–µ—Ç–∫–∏

        elif message.text == "‚ö°Ô∏è—Å—Ç–æ–ª‚ö°Ô∏è":
            global roz_stol
            if roz_stol == "‚ùå":
                ArduinoSerial.write(bytes([101]))
                roz_stol = "‚úÖ"
            else:
                ArduinoSerial.write(bytes([111]))
                roz_stol = "‚ùå"
            user(message)
        elif message.text == "‚ö°Ô∏è–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è‚ö°Ô∏è":
            global roz_bp
            if roz_bp == "‚ùå":
                ArduinoSerial.write(bytes([102]))
                roz_bp = "‚úÖ"
            else:
                ArduinoSerial.write(bytes([112]))
                roz_bp = "‚ùå"
            user(message)
        elif message.text == "‚ö°Ô∏è—Å—Ç–∞–Ω—Ü–∏—è‚ö°Ô∏è":
            global roz_stan
            if roz_stan == "‚ùå":
                ArduinoSerial.write(bytes([103]))
                roz_stan = "‚úÖ"
            else:
                ArduinoSerial.write(bytes([113]))
                roz_stan = "‚ùå"
            user(message)
        # SNH
        elif message.text == "–Ω–∞–∑–∞–¥":
            user(message)
        elif message.text == "–¥–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å":
            pass
        elif message.text == "off all":
            ArduinoSerial.write(bytes([211]))
            ArduinoSerial.write(bytes([212]))
            ArduinoSerial.write(bytes([213]))
            ArduinoSerial.write(bytes([214]))
            ArduinoSerial.write(bytes([111]))
            ArduinoSerial.write(bytes([112]))
            ArduinoSerial.write(bytes([113]))
            roz_stol = "‚ùå"
            roz_bp = "‚ùå"
            roz_stan = "‚ùå"
            stol_svet = "‚ùå"
            big_svet = "‚ùå"
            rgb_svet = "‚ùå"
            loop_svet = "‚ùå"
            user(message)
        else:
            bot.send_message(message.from_user.id, "–Ω–µ—Ç —Ç–∞–∫–æ–π –¥–µ—Ä—Ä–∏–∫—Ç–æ—Ä–∏–∏")  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    bot.polling(none_stop=True)
    error_bot = 0

except:
    error_bot = 1
    print("error, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    sleep(1)

