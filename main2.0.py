import serial
from telebot import *
from time import sleep
Sudo = input("sudo: ")
port = None
while True:
    if port != None:
        break
    else:
        pass
    try:
        port = int(input("please enter the port number where the device is connected:  "))
    except:
        port = None

big_svet = "‚ùå"
stol_svet = "‚ùå"
rgb_svet = "‚ùå"
loop_svet = "‚ùå"
roz_stol = "‚ùå"
roz_stan = "‚ùå"
roz_bp = "‚ùå"
Password = False
error_bot = 0

UserTrue = []
Master = []
RootUser = []

try:
   ArduinoSerial = serial.Serial(('com'+str(port)), 9600)
   sleep(1)
except:
   print("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ com"+str(port))

try:
    if error_bot == 0:
        print("–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    bot = telebot.TeleBot('6604896635:AAEYvcBPvbE1YwrdZbmbv77xu-R9G_hypss')


    @bot.message_handler(commands=["start"])
    def start(message):
        print(message.from_user.id)
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Ç–≤–æ–µ–≥–æ —É–º–Ω–æ–≥–æ –¥–æ–º–∞!"
                                               "\n–î–∞–≤–∞–π –∞–≤—Ç–æ—Ä–µ–∑–∏—Ä—É–µ–º—Å—è —á—Ç–æ –±—ã —è —Ç–µ–±—è —É–∑–Ω–∞–ªü•∏"
                                               "\n"
                                               "\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        #bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        #bot.delete_message(message.chat.id, message.message_id)
    @bot.message_handler(func=lambda message: message.text == "–Ω–∞–∑–∞–¥")
    def Exit(message):
        password(message)
    @bot.message_handler(func=lambda message: message.text == "üí°—Å–≤–µ—Çüí°")
    def Svet(message):
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                sanes = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn5 = types.KeyboardButton("üí°–ë–æ–ª—å—à–æ–πüí°")
                btn6 = types.KeyboardButton('üí°–ù–∞—Å—Ç–æ–ª—å–Ω—ã–πüí°')
                btn7 = types.KeyboardButton("üí°RGB –ª–µ–Ω—Ç–∞üí°")
                btn8 = types.KeyboardButton('üí°–õ—É–ø–∞üí°')
                btn9 = types.KeyboardButton('–Ω–∞–∑–∞–¥')
                sanes.add(btn5)
                sanes.add(btn6)
                sanes.add(btn7)
                sanes.add(btn8)
                sanes.add(btn9)
                bot.send_message(message.from_user.id, "üí°—Å–≤–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µüí°", reply_markup=sanes)
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass
    @bot.message_handler(func=lambda message: message.text == "‚ö°Ô∏è—Ä–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è")
    def Rozetka(message):
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                rozet = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn10 = types.KeyboardButton("‚ö°Ô∏è—Å—Ç–æ–ª‚ö°Ô∏è")
                btn11 = types.KeyboardButton('‚ö°Ô∏è—Å—Ç–∞–Ω—Ü–∏—è‚ö°Ô∏è')
                btn12 = types.KeyboardButton("‚ö°Ô∏è–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è‚ö°Ô∏è")
                btn13 = types.KeyboardButton('–Ω–∞–∑–∞–¥')
                rozet.add(btn10)
                rozet.add(btn11)
                rozet.add(btn12)
                rozet.add(btn13)
                bot.send_message(message.from_user.id, '‚ö°Ô∏è—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏‚ö°Ô∏è', reply_markup=rozet)
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass
    @bot.message_handler(func=lambda message: message.text == "üí°–ë–æ–ª—å—à–æ–πüí°")
    def RL1(message):
        global big_svet
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                if big_svet == "‚ùå":
                    ArduinoSerial.write(bytes([201]))
                    big_svet = "‚úÖ"
                else:
                    ArduinoSerial.write(bytes([211]))
                    big_svet = "‚ùå"
                    break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass
        password(message)
    @bot.message_handler(func=lambda message: message.text == "üí°–ù–∞—Å—Ç–æ–ª—å–Ω—ã–πüí°")
    def RL2(message):
        global stol_svet
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                if stol_svet == "‚ùå":
                    ArduinoSerial.write(bytes([202]))
                    stol_svet = "‚úÖ"
                else:
                    ArduinoSerial.write(bytes([212]))
                    stol_svet = "‚ùå"
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass
        password(message)
    @bot.message_handler(func=lambda message: message.text == "üí°RGB –ª–µ–Ω—Ç–∞üí°")
    def RL3(message):
        global rgb_svet
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                if rgb_svet == "‚ùå":
                    ArduinoSerial.write(bytes([203]))
                    rgb_svet = "‚úÖ"
                else:
                    ArduinoSerial.write(bytes([213]))
                    rgb_svet = "‚ùå"
                password(message)
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass
    @bot.message_handler(func=lambda message: message.text == "üí°–õ—É–ø–∞üí°")
    def RL4(message):
        global loop_svet
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                if loop_svet == "‚ùå":
                    ArduinoSerial.write(bytes([204]))
                    loop_svet = "‚úÖ"
                else:
                    ArduinoSerial.write(bytes([214]))
                    loop_svet = "‚ùå"
            password(message)
            break
        else:
            pass
        if UserFalse == True:
            password(message)
        else:
            pass
    @bot.message_handler(func=lambda message: message.text == "‚ö°Ô∏è—Å—Ç–æ–ª‚ö°Ô∏è")
    def RL5(message):
        global roz_stol
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                try:
                    if roz_stol == "‚ùå":
                        ArduinoSerial.write(bytes([101]))
                        roz_stol = "‚úÖ"
                    else:
                        ArduinoSerial.write(bytes([111]))
                        roz_stol = "‚ùå"
                    password(message)
                except:
                    bot.send_message(message.from_user.id, "‚öôÔ∏è–º–æ–¥—É–ª—å SNH –Ω–µ –æ–±–Ω–æ—Ä—É–∂–µ–Ω‚öôÔ∏è")
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass
    @bot.message_handler(func=lambda message: message.text == "‚ö°Ô∏è—Å—Ç–∞–Ω—Ü–∏—è‚ö°Ô∏è")
    def RL6(message):
        global roz_bp
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                try:
                    if roz_bp == "‚ùå":
                        ArduinoSerial.write(bytes([102]))
                        roz_bp = "‚úÖ"
                    else:
                        ArduinoSerial.write(bytes([112]))
                        roz_bp = "‚ùå"
                    password(message)
                except:
                    bot.send_message(message.from_user.id, "‚öôÔ∏è–º–æ–¥—É–ª—å SNH –Ω–µ –æ–±–Ω–æ—Ä—É–∂–µ–Ω‚öôÔ∏è")
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass
    @bot.message_handler(func=lambda message: message.text == "‚ö°Ô∏è–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è‚ö°Ô∏è")
    def RL7(message):
        global roz_stan
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                try:
                    if roz_stan == "‚ùå":
                        ArduinoSerial.write(bytes([103]))
                        roz_stan = "‚úÖ"
                    else:
                        ArduinoSerial.write(bytes([113]))
                        roz_stan = "‚ùå"
                    password(message)
                except:
                    bot.send_message(message.from_user.id, "‚öôÔ∏è–º–æ–¥—É–ª—å SNH –Ω–µ –æ–±–Ω–æ—Ä—É–∂–µ–Ω‚öôÔ∏è")
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
                pass
    @bot.message_handler(func=lambda message: message.text == "off all")
    def OffAll(message):
        global big_svet
        global stol_svet
        global rgb_svet
        global loop_svet
        global roz_stol
        global roz_stan
        global roz_bp
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                UserFalse = False
                try:
                    ArduinoSerial.write(bytes([211]))
                    ArduinoSerial.write(bytes([212]))
                    ArduinoSerial.write(bytes([213]))
                    ArduinoSerial.write(bytes([214]))
                    ArduinoSerial.write(bytes([111]))
                    ArduinoSerial.write(bytes([112]))
                    ArduinoSerial.write(bytes([113]))
                except:
                    bot.send_message(message.from_user.id, "‚öôÔ∏è–º–æ–¥—É–ª—å SNH –Ω–µ –æ–±–Ω–æ—Ä—É–∂–µ–Ω‚öôÔ∏è")
                roz_stol = "‚ùå"
                roz_bp = "‚ùå"
                roz_stan = "‚ùå"
                stol_svet = "‚ùå"
                big_svet = "‚ùå"
                rgb_svet = "‚ùå"
                loop_svet = "‚ùå"
                password(message)
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
                pass
    @bot.message_handler(func=lambda message: message.text == "Off")
    def Off(message):
        global UserFalse
        UserFalse = True
        for User in UserTrue:
            if User == message.from_user.id:
                pass
                break
            else:
                pass
        if UserFalse == True:
            password(message)
        else:
            pass


    @bot.message_handler(content_types=["text"])
    def password(message):
        print(message.text)
        global UserFalse
        UserFalse = True
        if message.text == "User":
            UserTrue.append(message.from_user.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üí°—Å–≤–µ—Çüí°")
            btn2 = types.KeyboardButton('‚ö°Ô∏è—Ä–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è')
            btn4 = types.KeyboardButton('üì¥–æ—Ç–∫–ª—é—á–∏—Ç—åüì¥')
            btn20 = types.KeyboardButton("off all")
            markup.add(btn1)
            markup.add(btn2)
            markup.add(btn4)
            markup.add(btn20)
            bot.send_message(message.from_user.id, "üñ•–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µüñ•"
                                                   "\n"
                                                   "\n–°–≤–µ—Çüí°"
                                                   "\n–ë–æ–ª—å—à–æ–π        " + str(big_svet) +
                                                   "\n–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π  " + str(stol_svet) +
                                                   "\nRGB –ª–µ–Ω—Ç–∞      " + str(rgb_svet) +
                                                   "\n–õ—É–ø–∞                " + str(loop_svet) +
                                                   "\n"
                                                   "\n–†–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è"
                                                   "\n–°—Ç–æ–ª                   " + str(roz_stol) +
                                                   "\n–°—Ç–∞–Ω—Ü–∏—è            " + str(roz_stan) +
                                                   "\n–ë–ª–æ–∫ –ü–∏—Ç–∞–Ω–∏—è  " + str(roz_bp), reply_markup=markup)
        elif message.text != "User":
            for User in UserTrue:
                if User == message.from_user.id:
                    UserFalse = False
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    btn1 = types.KeyboardButton("üí°—Å–≤–µ—Çüí°")
                    btn2 = types.KeyboardButton('‚ö°Ô∏è—Ä–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è')
                    btn4 = types.KeyboardButton('üì¥–æ—Ç–∫–ª—é—á–∏—Ç—åüì¥')
                    btn20 = types.KeyboardButton("off all")
                    markup.add(btn1)
                    markup.add(btn2)
                    markup.add(btn4)
                    markup.add(btn20)
                    bot.send_message(message.from_user.id, "üñ•–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µüñ•"
                                                           "\n"
                                                           "\n–°–≤–µ—Çüí°"
                                                           "\n–ë–æ–ª—å—à–æ–π        " + str(big_svet) +
                                                           "\n–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π  " + str(stol_svet) +
                                                           "\nRGB –ª–µ–Ω—Ç–∞      " + str(rgb_svet) +
                                                           "\n–õ—É–ø–∞                " + str(loop_svet) +
                                                           "\n"
                                                           "\n–†–æ–∑–µ—Ç–∫–∏‚ö°Ô∏è"
                                                           "\n–°—Ç–æ–ª                   " + str(roz_stol) +
                                                           "\n–°—Ç–∞–Ω—Ü–∏—è            " + str(roz_stan) +
                                                           "\n–ë–ª–æ–∫ –ü–∏—Ç–∞–Ω–∏—è  " + str(roz_bp), reply_markup=markup)
                    break
                else:
                    pass
            if UserFalse == True:
                bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –ø–∞—Ä–æ–ª—å!")
                bot.register_next_step_handler(message, password)
            else:
                pass
        else:
            pass


    bot.polling(none_stop=True, )
except:
    error_bot = 1
    print("error, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    sleep(1)






